import { EmdiCommand, EmdiResponse, EmdiEvent, EmdiError } from './commands/emdi-command';
import { Observable } from 'rxjs';
export declare class EmdiClient {
    private emdi;
    private sessionId;
    private pulseInterval;
    private heartbeat;
    private isSessionValid;
    private messages;
    private accessToken;
    private subscription;
    private connected;
    private disconnected;
    private validated;
    private event;
    private response;
    private request;
    private error;
    isConnected: boolean;
    onConnected$: Observable<boolean>;
    onDisconnected$: Observable<boolean>;
    onValidated$: Observable<boolean>;
    onEvent$: Observable<EmdiEvent>;
    onResponse$: Observable<EmdiResponse>;
    onRequest$: Observable<EmdiCommand>;
    onError$: Observable<EmdiError>;
    deviceId: number;
    egmId: string;
    constructor();
    connect(deviceId: number, accessToken: number): Promise<boolean>;
    validate(): Promise<boolean>;
    disconnect(): Promise<void>;
    show(): Promise<boolean>;
    hide(): Promise<boolean>;
    getEgmId(): Promise<string>;
    sendContent(mediaDisplayId: number, contentId: number, contentData: string): Promise<void>;
    subscribe(...codes: string[]): Promise<string[]>;
    private reconnect;
    private onEvent;
    private onResponse;
    private onRequest;
    private onError;
    private onConnected;
    private onDisconnected;
    private onValidated;
    private sendCommand;
    private setDeviceVisbleState;
    private sendResponse;
    private pulse;
    private onReceive;
    private isCommsOnLineAckType;
    private isErrorType;
    private isResponseType;
    private isEventType;
    private formatXml;
}
